#do not use $t8 or $t9
##copy of first half of project2
.data
	file:		.space 24	
	fileName:	.asciiz "Enter a filename: "
	buffer:		.space 100
	first2:		.space 2
	.align 2
	dibSize:	.space 4
	nextTwelve:	.space 12
	color:		.space 8
	newLine:	.asciiz "\n"
	characterMsg:	.asciiz "The first two characters: "
	sizeMsg:	.asciiz "The size of the BMP file (bytes): "
	startingAdMsg:	.asciiz "The starting address of image data: "
	widthMsg:	.asciiz "Image width (pixels): "
	heightMsg:	.asciiz "Image height (pixels): "
	numPlanesMsg:	.asciiz "The number of color planes: "
	numBitsMsg:	.asciiz "The number of bits per pixel: "
	compMsg:	.asciiz "The compression method: "
	rawSize:	.asciiz "The size of raw bitmap data (bytes): "
	horRes:		.asciiz "The horizontal resolution(pixels/meter): "
	verRes:		.asciiz "The vertical resolution(pixels/meter): "
	colorPal:	.asciiz "The number of colors in the color palette: " 
	impColors:	.asciiz "The number of important colors used: "
	index0:		.asciiz "The color at index 0 (B G R): "
	index1:		.asciiz "The color at index 1 (B G R): "
	whiteMsg:	.asciiz "255 255 255"
	blackMsg:	.asciiz "0 0 0"
.text

main:
	#print file message
	addi $v0, $zero, 4
	la $a0, fileName
	syscall
	#read in string
	addi $v0, $zero, 8
	la $a0, buffer
	addi $a1, $zero, 100
	syscall	
	#remove nextLine character
	la $a0, buffer
	add $a0, $a0, 79
	removeLoop:
		lb $v0, 0($a0)
		bnez $v0, doneRemove
		sub $a0, $a0, 1
		j removeLoop
	doneRemove:
		sb $0, 0($a0)
	#open file
	addi $v0, $zero, 13
	la $a0, buffer
	add $a1, $zero, $zero
	add $a2, $zero, $zero
	syscall
	add $s0, $zero, $v0
	#read first two bits
	addi $v0, $zero, 14
	add $a0, $zero, $s0
	la $a1, first2
	#number of bytes to read in
	addi $a2, $zero, 2
	syscall
	la $s1, first2
	#print first two characters
	addi $v0, $zero, 4
	la $a0, characterMsg
	syscall
	addi $v0, $zero, 11
	lb $a0, 0($s1)
	syscall
	lb $a0, 1($s1)
	syscall
	#newLine
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	#read next twelve bits
	addi $v0, $zero, 14
	add $a0, $zero, $s0
	la $a1, nextTwelve
	#number of bytes to read in
	addi $a2, $zero, 12
	syscall
	la $s1, nextTwelve
	#prints size int
	addi $v0 $zero, 4
	la $a0, sizeMsg
	syscall
	addi $v0, $zero, 1
	lw $a0, 0($s1)
	syscall
	#newLine
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	#prints starting image number
	addi $v0, $zero, 4
	la $a0, startingAdMsg
	syscall
	addi $v0, $zero, 1
	lw $a0, 8($s1)
	syscall
	move $s5, $a0				#starting address in s5
	#newLine
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	#read in dib size
	addi $v0, $zero, 14
	add $a0, $zero, $s0
	la $a1, dibSize
	#number of bytes to read
	addi $a2, $zero, 4
	syscall
	la $s1, dibSize
	lw $a0, 0($s1)
	move $s3, $a0
	#allocate memory for the rest of the dib header
	addi $v0, $zero, 9
	add $a0, $zero, $s3
	syscall
	move $s6, $v0			#s6 is new memory allocated
	#read in dib header
	addi $v0, $zero 14
	add $a0, $zero, $s0
	la $a1, ($s6)
	#number of bytes to read
	add $a2, $zero, $s3
	syscall 
	la $s1, ($s6)	
	#print width message
	addi $v0, $zero, 4
	la $a0, widthMsg
	syscall
	addi $v0, $zero, 1
	lw $a0, 0($s1)
	syscall
	#prints height message
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, heightMsg
	syscall
	addi $v0, $zero, 1
	lw $a0, 4($s1)
	syscall
	move $s3, $a0
	#prints color plane
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, numPlanesMsg
	syscall
	addi $v0, $zero, 1
	lh $a0, 8($s1)
	syscall
	#prints bit per pixel
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, numBitsMsg
	syscall
	addi $v0, $zero, 1
	lh $a0, 10($s1)
	syscall
	#print compression method
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, compMsg
	syscall
	addi $v0, $zero, 1
	lw $a0, 12($s1)	
	syscall	
	#raw bit map size
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, rawSize
	syscall
	addi $v0, $zero, 1
	lw $a0, 16($s1)
	syscall
	move $s4, $a0				#s4 is raw bit map data size
	#horizontal resolution
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, horRes
	syscall
	addi $v0, $zero, 1
	lw $a0, 20($s1)
	syscall
	#vertical resolution
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, verRes
	syscall
	addi $v0, $zero, 1
	lw $a0, 24($s1)
	syscall
	#number of colors used
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, colorPal
	syscall 
	addi $v0, $zero, 1
	lw $a0, 28($s1)
	syscall
	#number of important colors
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, impColors
	syscall
	addi $v0, $zero, 1
	lw $a0, 32($s1)
	syscall
	
	# Read the color bytes
	addi $v0, $zero, 14		# Syscall 14: Read file
	add  $a0, $zero, $s0		# $a0 is the file descriptor
	la   $a1, color		# $a1 is the address of a buffer (colorBits)
	addi $a2, $zero, 8		# $s2 is the number of bytes to read
	syscall	
	la   $s1, color
	
	#Color at Index 0
	add $t7, $zero, $zero
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, index0
	syscall
	lb $t4, 0($s1)
	
	bne $t4, $zero, label
	j label2
label:
	addi $t7, $zero, 1
	
label2:
	lb $t3, 1($s1)
	sll $t3, $t3, 24
	srl $t3, $t3, 16
	lb $t2, 2($s1)
	sll $t2, $t2, 24
	srl $t2, $t2, 8
	or $t4, $t4, $t3
	or $t4, $t4, $t2
	beq $t4, $zero, black
	addi $v0, $zero, 4
	la $a0, whiteMsg
	syscall
	j next
black:
	addi $v0, $zero, 4
	la $a0, blackMsg
	syscall
next:
	#Color at Index 1
	addi $v0, $zero, 4
	la $a0, newLine
	syscall
	la $a0, index1
	syscall
	lb $t4, 4($s1)
	lb $t3, 5($s1)
	sll $t3, $t3, 24
	srl $t3, $t3, 16
	lb $t2, 6($s1)
	sll $t2, $t2, 24
	srl $t2, $t2, 8
	or $t4, $t4, $t3
	or $t4, $t4, $t2
	beq $t4, $zero, black2
	addi $v0, $zero, 4
	la $a0, whiteMsg
	syscall
	j next2
black2:
	addi $v0, $zero, 4
	la $a0, blackMsg
	syscall
	
next2:
	addi $v0, $zero, 9
	add $a0, $zero, $s4
	syscall
	add $s6, $zero, $v0		
	
	addi $v0, $zero, 14
	add $a0, $zero, $s0
	la $a1, ($s6)
	add $a2, $zero, $s4
	syscall
	la $s1, ($s6)
	
	add $t3, $zero, $zero		
	add $t5, $zero, $zero		
	addi $t6, $zero, 128		
	add $t8, $zero, $zero		
	div $s4, $s3			
	mflo $s2
	add $s4, $zero, $s3
	add $s7, $zero, $s3
	addi $t2, $zero, 7
	add $s5, $zero, $zero		
	addi $s6, $zero, 0	
	
loop1:
	sll $t8, $t8, 1
	subi $s3, $s3, 1
	blt $s3, $zero, finished
	mult $s3, $s2
	mflo $t0
	add $t0, $t0, $s5
	add $t0, $t0, $s1
	lbu $t1, 0($t0)
	and $t1, $t1, $t6
	srlv $t1, $t1, $t2
	addi $t3, $t3, 1
	or $t8, $t8, $t1
	beq $t3, 8, print
	j loop1
	
finished:
	subi $t3, $t3, 8
	nor $t3, $t3, $zero
	sllv $t8, $t8, $t3	
print:
	beq $t7, 0, print2
	nor $t8, $t8, $zero
print2:
	addi $t9, $zero, 1
	add $t8, $zero, $zero
	addi $t5, $t5, 1
	srl $t6, $t6, 1
	add $t3, $zero, $zero		
	add $s3, $zero, $s7
	subi $t2, $t2, 1
	beq $t6, $zero, moveToNext
	j loop1
	
moveToNext:
	addi $s6, $s6, 1
	addi $s5, $s5, 1
	sll $s0, $s2, 3
	beq $t5, $s0, row
	add $t2, $zero, $zero
	addi $t2, $zero, 7
	add $t6, $zero, $zero		
	addi $t6, $zero, 128
	j loop1	
row:
	div $s6, $t5, $s6
nextRow:
	add $t8, $zero, $zero
	beq $t5, 480, loop2
	addi $t9, $zero, 1
	addi $t5, $t5, 1
	j nextRow
	
loop2:
	sub $s3, $s3, $s6
	add $s6, $zero, $zero
	subi $s4, $s4, 8
	ble $s4, 0, done
	blt $s3, $zero, done
	add $t3, $zero, $zero		
	add $t5, $zero, $zero		
	addi $t6, $zero, 128		
	add $t4, $zero, $zero		
	addi $t2, $zero, 7
	add $s5, $zero, $zero
	add $s7, $zero, $s3
	j loop1
	
done:
	# Close file
	add  $v0, $zero, 16		# Syscall 16: Close file
	add  $a0, $zero, $s0		# $a0 is the file descriptor
	syscall				# Close file
	# Terminate Program
	addi $v0, $zero, 10		# Syscall 10: Terminate program
	syscall				# Terminate program

	
	
	
