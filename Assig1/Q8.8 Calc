# CS-447
#Simran Gidwani
#CS447

.text

#dont use t9 for anything 

loop: 
	beq $t9, $zero, loop		#while t9 = 0 keep going through this loop
	
	add $s0, $zero, $a0 		#puts contents from A into s0
	add $s1, $zero, $a1		#puts contents from B into s1
	
	#ADDITION
	add $s2, $s0, $s1 		
	#SUBTRACTION
	sub $s3, $s0, $s1 		
	#LOADS INTO V0
	or $v0, $zero, $s3
	sll $v0, $v0, 16
	andi $s2, $s2, 0xffff		
	or $v0, $v0, $s2
	#MULTIPLICATION
	slti $t3, $s0, 0		#If the first number is negative then make $t3 = 1
	slti $t4, $s1, 0		#If the second number is negative then make $t4 = 1

	addi $s4, $zero, 0
	addi $s7, $zero, 0
	addi $t1, $zero, 0
	
	add $t5, $t3, $t4		#If both numbers are negative then $t5 will be 2
	beq $t5, 2, bothNegs
	beq $t3, 1, ANeg
	beq $t4, 1, BNeg

	j multiplyLoop

	ANeg: 
	sub $s0, $zero, $s0		#Taking absolute value of the first number
	j multiplyLoop
	
	BNeg: 
	sub $s1, $zero, $s1		#Taking absolute value of the second number
	j multiplyLoop

	bothNegs:
	sub $s0, $zero, $s0		#Taking absolute value of the first number
	sub $s1, $zero, $s1		#Taking absolute value of the second number
	j multiplyLoop
	
multiplyLoop:

	beq  $s7, 17, endMultiply	
	
	addi $t0, $zero, 1  		
	srlv $t2, $s1, $s7  		
	and  $t1, $t0, $t2  		

	beq  $t1, 1, LSB1		#If the LSB is 1
	beq  $t1, 0, LSB0		#If the LSB is 0
	
	LSB1:
	
		sllv $t1, $s0, $s7		
		add $s4, $s4, $t1		#increment running total
		addi $s7, $s7, 1		#increment counter
		j multiplyLoop			

	LSB0:
		sllv $t1, $s0, $s7		
		addi $s7, $s7, 1		#increment counter
		j multiplyLoop			
	
	endMultiply:
		bne $t5, 1, checkNegs

add $t6, $zero, $s4
sub $s4, $zero, $t6

#DIVISION
j checkNegs
	
		checkNegs:
		add $s0, $zero, $a0
		add $s1, $zero, $a1
		
		slt $t3, $s0, $zero			#check if A is neg
		beq $t3, 1, firstNegcheckSec		
		beq $t3, 0, firstPoscheckSec
	
		firstNegcheckSec:			#A is neg so check B
			slt $t4, $s1, $zero
			beq $t4, 1, bothNeg		#if B is neg go to both Neg
			beq $t4, 0, firstNegSecPos
		
		firstPoscheckSec:
			slt $t4, $s1, $zero
			beq $t4, 1, firstPosSecNeg
			beq $t4, 0, bothPos
	
		firstNegSecPos:
			sub $s0, $zero, $s0
			j _Negdivision
			
		firstPosSecNeg:
			sub $s1, $zero, $s1		#go to negDivision loop
			j _Negdivision

		bothNeg:				
			sub $s0, $zero, $s0 		#change both to positive
			sub $s1, $zero, $s1
			j _division	
		bothPos:
			j _division
			
	_division:		
		add $t3, $zero, $zero			#counter for shift
		add $t0, $zero, $zero			#counter for quotient
	
		add $s5, $zero, $zero			#quotient
	
	
		divisionLoop:
			sge $t2, $s0, $s1		#if a(dividend) is greater than or equal to b set t2 to 1
			beq $t2, 1, bLower
			beq $t2, $zero, bGreater	#if b is greater than a go to bGreater (dividend is less than divisor)
		
		bLower: 
			sub $t3, $s0, $s1		#subtract a-b
			add $s0, $zero, $t3		#move remainder to s0
					
			addi $t0, $t0, 1		#increment counter
		
			j divisionLoop
		
		bGreater:
			j format

		format:
			add $s6, $zero, $zero		#set quotient2 to 0
			add $t1, $zero, $zero		#second counter	
			
			add $s5, $zero, $t0		#move quotient1 to s5
		
			#beq $s0, $zero, done		#if remainder == 0, no need to do second division
			sll $s0, $s0, 8			#shift remainder left by 8
		
			secDivisionLoop:
				sge $t2, $s0, $s1
				beq $t2, 1, remLower		#b is lower
				beq $t2, $zero, remGreater	#if b is greater than a go to bGreater	
		
			remLower: 
				sub $t4, $s0, $s1		#subtract a-b
				add $s0, $zero, $t4		#move remainder to s0		
				addi $t1, $t1, 1		#increment counter -- quotient 2
		
				j secDivisionLoop
		
			remGreater:
				j storeToV1	
			
		_Negdivision:		
		add $t3, $zero, $zero			#counter for shift
		add $t0, $zero, $zero			#counter for quotient
	
		add $s5, $zero, $zero			#quotient
	
	
		NegDivisionLoop:
			sge $t2, $s0, $s1		#if a(dividend) is greater than or equal to b set t2 to 1
			beq $t2, 1, bLowerNeg
			beq $t2, $zero, bGreaterNeg	#if b is greater than a go to bGreater (dividend is less than divisor)
		
		bLowerNeg: 
			sub $t3, $s0, $s1		#subtract a-b
			add $s0, $zero, $t3		#move remainder to s0
					
			addi $t0, $t0, 1		#increment counter
		
			j NegDivisionLoop
		
		bGreaterNeg:
			j formatNeg

		formatNeg:
			add $s6, $zero, $zero		#set quotient2 to 0
			add $t1, $zero, $zero		#second counter	
			
			add $s5, $zero, $t0		#move quotient1 to s5
					
			sll $s0, $s0, 8			#shift remainder left by 8
		
			secDivisionLoopNeg:
				sge $t2, $s0, $s1		#if a is greater than or equal to b set t2 to 1
				beq $t2, 1, remLowerNeg		#b is lower
				beq $t2, $zero, remGreaterNeg	#if b is greater than a go to bGreater	
		
			remLowerNeg: 
				sub $t4, $s0, $s1		#subtract a-b
				add $s0, $zero, $t4		#move remainder to s0		
				addi $t1, $t1, 1		#increment counter -- quotient 2
				j secDivisionLoopNeg
		
			remGreaterNeg:		
				j storeToV1Neg
			

	storeToV1:
		sll $s5, $s5, 8
		or $s6, $s5, $t1

		or $v1, $zero, $s6
		srl $s4, $s4, 8
		sll $v1, $v1, 16		
		
		add $v1, $v1, $s4	
		j squareRoot
		
	storeToV1Neg:
			
		sll $s5, $s5, 8
		xor $s6, $s5, $t1
		sub $s6, $zero, $s6
		
		or $v1, $zero, $s6
		srl $s4, $s4, 8		
		sll $v1, $v1, 16	
		andi $s4, $s4, 0xffff		
		add $v1, $v1, $s4	
		j squareRoot	
#SQUARE ROOT	
squareRoot:
	sge $t8, $a0, 0
	beq $t8, 1, Apos			#a is pos
	sub $t0, $zero, $a0			#set a to positive if neg
	j Aneg			

	Apos:
		add $t0, $zero, $a0

	Aneg:
		sll $t0, $t0, 8 			#Q8.16
		add $t1, $zero, 0xC00000 		#2bit
		add $t2, $zero, $zero 			#left most unused group
		add $t3, $zero, $zero 			#current remainder
		add $t4, $zero, $zero 			#temp
		add $t5, $zero, $zero 			#current result
		add $t6, $zero, $zero 			#play reg
		add $t7, $zero, $zero	 		#x
		add $s0, $zero, $zero 			#counter
		j sqrtLoop

	sqrtLoop:
		beq $s0, 12, doneSqrt
		sll $t6, $t3, 2
		and $t2, $t0, $t1
		
		bne $s0, 0, equal1
		srl $t2, $t2, 22
		j continue
		
		equal1:
			bne $s0, 1, equal2
			srl $t2, $t2, 20
			j continue
		equal2:
			bne $s0, 2, equal3
			srl $t2, $t2, 18
			j continue	
		equal3:
			bne $s0, 3, equal4
			srl $t2, $t2, 16
			j continue

		equal4:
			bne $s0, 4, equal5
			srl $t2, $t2, 14
			j continue

		equal5:
			bne $s0, 5, equal6
			srl $t2, $t2, 12
			j continue
		equal6:
			bne $s0, 6, equal7
			srl $t2, $t2, 10	
			j continue
		equal7:
			bne $s0, 7, equal8
			srl $t2, $t2, 8
			j continue
		equal8:
			bne $s0, 8, equal9
			srl $t2, $t2, 6
			j continue
		equal9:
			bne $s0, 9, equal10
			srl $t2, $t2, 4
			j continue
		equal10:
			bne $s0, 10, done
			srl $t2, $t2, 2
			j continue
		done:

continue:	
	add $t3, $t6, $t2
	sll $t6, $t5, 2

	add $t4, $zero, $t6
	addi $t6, $t4, 1
	ble $t6, $t3, checkTemp
	add $t7, $zero, $zero
	j next

checkTemp:
	addi $t7, $zero, 1
	sub $t6, $t3, $t6
	add $t3, $zero, $t6

next:
	sll $t6, $t5, 1
	add $t5, $t6, $t7
	sra $t1, $t1, 2
	addi $s0, $s0, 1
	j sqrtLoop

	doneSqrt:
		add $a2, $t5, $zero
		
	add $t9, $zero, $zero		
	j loop
